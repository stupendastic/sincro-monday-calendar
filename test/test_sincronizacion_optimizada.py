#!/usr/bin/env python3
"""
Script de prueba optimizado para verificar la sincronizaci√≥n Monday ‚Üî Google Calendar
"""

import os
import time
from dotenv import load_dotenv
from monday_api_handler import MondayAPIHandler
from google_calendar_service import get_calendar_service
from sync_logic import sincronizar_item_especifico
import config

# Cargar variables de entorno
load_dotenv()

def test_busqueda_optimizada():
    """Prueba la b√∫squeda optimizada por Google Event ID"""
    print("üîç PRUEBA DE B√öSQUEDA OPTIMIZADA")
    print("=" * 40)
    
    try:
        monday_handler = MondayAPIHandler(api_token=os.getenv("MONDAY_API_KEY"))
        
        # Buscar un elemento que sabemos que existe
        items = monday_handler.search_items_by_name(
            board_id=str(config.BOARD_ID_GRABACIONES),
            item_name="PRUEBA SINCRONIZACI√ìN AUTOM√ÅTICA",
            exact_match=True
        )
        
        if not items:
            print("‚ùå No se encontr√≥ el elemento de prueba")
            return False
        
        item = items[0]
        item_id = item.id
        print(f"‚úÖ Elemento encontrado: {item_id}")
        
        # Obtener el Google Event ID
        items_list = monday_handler.get_items(str(config.BOARD_ID_GRABACIONES))
        google_event_id = None
        
        for item_data in items_list:
            if item_data.get('id') == item_id:
                column_values = item_data.get('column_values', [])
                for col in column_values:
                    if col.get('id') == config.COLUMN_MAP_REVERSE.get('ID Evento Google'):
                        google_event_id = col.get('text')
                        break
                break
        
        if not google_event_id:
            print("‚ùå No se encontr√≥ Google Event ID")
            return False
        
        print(f"‚úÖ Google Event ID: {google_event_id}")
        
        # Probar b√∫squeda optimizada
        from sync_logic import _obtener_item_id_por_google_event_id_optimizado
        
        start_time = time.time()
        found_item_id = _obtener_item_id_por_google_event_id_optimizado(
            google_event_id, monday_handler
        )
        end_time = time.time()
        
        if found_item_id:
            print(f"‚úÖ B√∫squeda optimizada exitosa en {end_time - start_time:.2f}s")
            print(f"üìä Item ID encontrado: {found_item_id}")
            return True
        else:
            print("‚ùå B√∫squeda optimizada fall√≥")
            return False
            
    except Exception as e:
        print(f"‚ùå Error en prueba de b√∫squeda: {e}")
        return False

def test_sincronizacion_completa():
    """Prueba la sincronizaci√≥n completa Monday ‚Üî Google"""
    print("\nüîÑ PRUEBA DE SINCRONIZACI√ìN COMPLETA")
    print("=" * 40)
    
    try:
        monday_handler = MondayAPIHandler(api_token=os.getenv("MONDAY_API_KEY"))
        google_service = get_calendar_service()
        
        # Buscar elemento de prueba
        items = monday_handler.search_items_by_name(
            board_id=str(config.BOARD_ID_GRABACIONES),
            item_name="PRUEBA SINCRONIZACI√ìN AUTOM√ÅTICA",
            exact_match=True
        )
        
        if not items:
            print("‚ùå No se encontr√≥ el elemento de prueba")
            return False
        
        item_id = items[0].id
        print(f"‚úÖ Elemento de prueba: {item_id}")
        
        # Probar sincronizaci√≥n
        start_time = time.time()
        success = sincronizar_item_especifico(
            item_id=item_id,
            monday_handler=monday_handler,
            google_service=google_service
        )
        end_time = time.time()
        
        if success:
            print(f"‚úÖ Sincronizaci√≥n exitosa en {end_time - start_time:.2f}s")
            return True
        else:
            print("‚ùå Sincronizaci√≥n fall√≥")
            return False
            
    except Exception as e:
        print(f"‚ùå Error en prueba de sincronizaci√≥n: {e}")
        return False

def test_webhook_processing():
    """Prueba el procesamiento de webhooks"""
    print("\nüì° PRUEBA DE PROCESAMIENTO DE WEBHOOKS")
    print("=" * 40)
    
    try:
        # Simular webhook de Monday
        webhook_data = {
            "event": {
                "type": "update_column_value",
                "pulseId": "9880829856",
                "pulseName": "PRUEBA SINCRONIZACI√ìN AUTOM√ÅTICA",
                "columnId": "fecha56"
            }
        }
        
        print(f"üìã Webhook simulado: {webhook_data['event']['type']}")
        print(f"üìä Item ID: {webhook_data['event']['pulseId']}")
        print(f"üìù Nombre: {webhook_data['event']['pulseName']}")
        
        # Verificar que el servidor est√° funcionando
        import requests
        response = requests.get("http://localhost:6754/health", timeout=10)
        
        if response.status_code == 200:
            health_data = response.json()
            print(f"‚úÖ Servidor saludable: {health_data['status']}")
            print(f"üìä Cola de sincronizaci√≥n: {health_data['queue_size']}")
            return True
        else:
            print(f"‚ùå Servidor no responde: {response.status_code}")
            return False
            
    except Exception as e:
        print(f"‚ùå Error en prueba de webhook: {e}")
        return False

def main():
    """Funci√≥n principal"""
    print("üöÄ PRUEBA DE SINCRONIZACI√ìN OPTIMIZADA")
    print("=" * 50)
    
    # Verificar que el servidor est√° corriendo
    print("üîç Verificando servidor...")
    if not test_webhook_processing():
        print("‚ùå El servidor no est√° funcionando. Ejecuta 'python3 app.py' primero.")
        return
    
    # Probar b√∫squeda optimizada
    print("\n" + "="*50)
    if test_busqueda_optimizada():
        print("‚úÖ B√∫squeda optimizada: FUNCIONA")
    else:
        print("‚ùå B√∫squeda optimizada: FALLA")
    
    # Probar sincronizaci√≥n completa
    print("\n" + "="*50)
    if test_sincronizacion_completa():
        print("‚úÖ Sincronizaci√≥n completa: FUNCIONA")
    else:
        print("‚ùå Sincronizaci√≥n completa: FALLA")
    
    print("\n" + "="*50)
    print("üìã RESUMEN DE PRUEBAS")
    print("=" * 50)
    print("üí° Para probar la sincronizaci√≥n autom√°tica:")
    print("1. Crea un elemento en Monday.com")
    print("2. Observa los logs del servidor")
    print("3. Verifica que se crea en Google Calendar")
    print("4. Cambia la fecha en Monday.com")
    print("5. Verifica que se actualiza en Google Calendar")

if __name__ == "__main__":
    main()

