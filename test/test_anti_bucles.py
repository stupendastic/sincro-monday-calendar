#!/usr/bin/env python3
"""
Script para probar el sistema anti-bucles
"""

import os
import time
from dotenv import load_dotenv
from monday_api_handler import MondayAPIHandler
from sync_logic import _detectar_cambio_de_automatizacion
import config

# Cargar variables de entorno
load_dotenv()

def test_deteccion_automatizacion():
    """Prueba la detecci√≥n de automatizaci√≥n"""
    print("üõ°Ô∏è PRUEBA DEL SISTEMA ANTI-BUCLES")
    print("=" * 50)
    
    try:
        monday_handler = MondayAPIHandler(api_token=os.getenv("MONDAY_API_KEY"))
        
        # Buscar un elemento que sabemos que existe
        items = monday_handler.search_items_by_name(
            board_id=str(config.BOARD_ID_GRABACIONES),
            item_name="PRUEBA SINCRONIZACI√ìN FINAL",
            exact_match=True
        )
        
        if not items:
            print("‚ùå No se encontr√≥ el elemento de prueba")
            return False
        
        item_id = items[0].id
        print(f"‚úÖ Elemento encontrado: {item_id}")
        
        # Probar detecci√≥n de automatizaci√≥n
        print(f"\nüîç Probando detecci√≥n de automatizaci√≥n...")
        es_automatizacion = _detectar_cambio_de_automatizacion(item_id, monday_handler)
        
        if es_automatizacion:
            print(f"ü§ñ RESULTADO: Cambio de AUTOMATIZACI√ìN detectado")
            print(f"‚úÖ Sistema anti-bucles funcionando correctamente")
        else:
            print(f"üë§ RESULTADO: Cambio de USUARIO REAL detectado")
            print(f"‚úÖ Sistema anti-bucles funcionando correctamente")
        
        return True
        
    except Exception as e:
        print(f"‚ùå Error en prueba: {e}")
        return False

def test_cooldown():
    """Prueba el sistema de cooldown"""
    print("\n‚è∞ PRUEBA DEL SISTEMA DE COOLDOWN")
    print("=" * 40)
    
    try:
        # Simular cooldown
        from sync_logic import last_sync_times
        
        test_key = "test_cooldown"
        current_time = time.time()
        
        # Simular sincronizaci√≥n reciente
        last_sync_times[test_key] = current_time - 5  # 5 segundos atr√°s
        
        # Verificar cooldown
        if test_key in last_sync_times:
            time_since_last = current_time - last_sync_times[test_key]
            if time_since_last < config.SYNC_COOLDOWN_SECONDS:
                print(f"‚è≠Ô∏è  Cooldown activo: {time_since_last:.1f}s < {config.SYNC_COOLDOWN_SECONDS}s")
                print(f"‚úÖ Sistema de cooldown funcionando")
                return True
            else:
                print(f"‚úÖ Cooldown expirado: {time_since_last:.1f}s >= {config.SYNC_COOLDOWN_SECONDS}s")
                return True
        
        return False
        
    except Exception as e:
        print(f"‚ùå Error en prueba de cooldown: {e}")
        return False

def main():
    """Funci√≥n principal"""
    print("üöÄ PRUEBA COMPLETA DEL SISTEMA ANTI-BUCLES")
    print("=" * 60)
    
    # Probar detecci√≥n de automatizaci√≥n
    if test_deteccion_automatizacion():
        print("‚úÖ Detecci√≥n de automatizaci√≥n: FUNCIONA")
    else:
        print("‚ùå Detecci√≥n de automatizaci√≥n: FALLA")
    
    # Probar sistema de cooldown
    if test_cooldown():
        print("‚úÖ Sistema de cooldown: FUNCIONA")
    else:
        print("‚ùå Sistema de cooldown: FALLA")
    
    print("\n" + "="*60)
    print("üìã RESUMEN DE CONFIGURACI√ìN")
    print("=" * 60)
    print(f"ü§ñ Usuario de automatizaci√≥n: {config.AUTOMATION_USER_NAME} (ID: {config.AUTOMATION_USER_ID})")
    print(f"‚è∞ Cooldown: {config.SYNC_COOLDOWN_SECONDS} segundos")
    print(f"üïê Ventana de detecci√≥n: {config.AUTOMATION_DETECTION_WINDOW} segundos")
    
    print("\nüí° Para probar el sistema completo:")
    print("1. Crea un elemento en Monday.com")
    print("2. Cambia la fecha r√°pidamente")
    print("3. Observa los logs del servidor")
    print("4. Deber√≠as ver mensajes de anti-bucles")

if __name__ == "__main__":
    main()
