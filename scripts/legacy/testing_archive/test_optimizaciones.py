#!/usr/bin/env python3
"""
Script para probar las nuevas optimizaciones:
1. B√∫squeda optimizada de items
2. Detecci√≥n de automatizaci√≥n para evitar bucles
"""
import sys
sys.path.append(os.path.dirname(os.path.dirname(os.path.dirname(__file__))))
import os
import time
from datetime import datetime, timedelta
from dotenv import load_dotenv

# Cargar variables de entorno
load_dotenv()

def test_busqueda_optimizada():
    """Prueba la nueva b√∫squeda optimizada vs la anterior."""
    print("üöÄ PRUEBA DE B√öSQUEDA OPTIMIZADA")
    print("=" * 50)
    
    try:
        # Importar m√≥dulos necesarios
        from monday_api_handler import MondayAPIHandler
        from sync_logic import (
            _obtener_item_id_por_google_event_id_optimizado,
            _obtener_item_id_por_google_event_id_mejorado
        )
        import config
        
        # Inicializar handler
        monday_handler = MondayAPIHandler(api_token=os.getenv("MONDAY_API_KEY"))
        print("‚úÖ Monday API Handler inicializado")
        
        # ID de prueba conocido (del script anterior)
        test_google_event_id = "mnjvjb1igd0a2f6l84fipo5iuk"
        
        print(f"üîç Buscando Google Event ID: {test_google_event_id}")
        
        # Probar m√©todo OPTIMIZADO
        print("\n‚ö° M√âTODO OPTIMIZADO:")
        start_time = time.time()
        result_optimized = _obtener_item_id_por_google_event_id_optimizado(
            test_google_event_id, 
            monday_handler
        )
        optimized_time = time.time() - start_time
        print(f"   Resultado: {result_optimized}")
        print(f"   Tiempo: {optimized_time:.2f} segundos")
        
        # Probar m√©todo ANTERIOR (para comparaci√≥n)
        print("\nüêå M√âTODO ANTERIOR:")
        start_time = time.time()
        result_legacy = _obtener_item_id_por_google_event_id_mejorado(
            test_google_event_id, 
            monday_handler
        )
        legacy_time = time.time() - start_time
        print(f"   Resultado: {result_legacy}")
        print(f"   Tiempo: {legacy_time:.2f} segundos")
        
        # Comparar resultados
        print("\nüìä COMPARACI√ìN:")
        print(f"   Optimizado: {optimized_time:.2f}s")
        print(f"   Anterior:   {legacy_time:.2f}s")
        
        if optimized_time < legacy_time:
            mejora = ((legacy_time - optimized_time) / legacy_time) * 100
            print(f"   üéâ ¬°Mejora del {mejora:.1f}%!")
        else:
            print(f"   ‚ö†Ô∏è  El m√©todo optimizado no fue m√°s r√°pido")
        
        if result_optimized == result_legacy:
            print(f"   ‚úÖ Ambos m√©todos devolvieron el mismo resultado")
        else:
            print(f"   ‚ùå Los m√©todos devolvieron resultados diferentes")
        
        return result_optimized == result_legacy
        
    except Exception as e:
        print(f"‚ùå Error en prueba de b√∫squeda: {e}")
        return False

def test_deteccion_automatizacion():
    """Prueba la detecci√≥n de cambios de automatizaci√≥n."""
    print("\nü§ñ PRUEBA DE DETECCI√ìN DE AUTOMATIZACI√ìN")
    print("=" * 50)
    
    try:
        # Importar m√≥dulos necesarios
        from monday_api_handler import MondayAPIHandler
        from sync_logic import _detectar_cambio_de_automatizacion
        import config
        
        # Inicializar handler
        monday_handler = MondayAPIHandler(api_token=os.getenv("MONDAY_API_KEY"))
        print("‚úÖ Monday API Handler inicializado")
        
        # ID de prueba conocido
        test_item_id = "9733398727"
        
        print(f"üîç Analizando item: {test_item_id}")
        print(f"ü§ñ Usuario de automatizaci√≥n: {config.AUTOMATION_USER_NAME} (ID: {config.AUTOMATION_USER_ID})")
        
        # Detectar automatizaci√≥n
        es_automatizacion = _detectar_cambio_de_automatizacion(test_item_id, monday_handler)
        
        if es_automatizacion:
            print("ü§ñ ‚úÖ Automatizaci√≥n DETECTADA - Se frenar√≠a el bucle")
        else:
            print("üë§ ‚úÖ Usuario real detectado - Sincronizaci√≥n continuar√≠a")
        
        return True
        
    except Exception as e:
        print(f"‚ùå Error en prueba de automatizaci√≥n: {e}")
        return False

def test_sincronizacion_completa():
    """Prueba una sincronizaci√≥n completa con las optimizaciones."""
    print("\nüîÑ PRUEBA DE SINCRONIZACI√ìN COMPLETA OPTIMIZADA")
    print("=" * 50)
    
    try:
        # Importar m√≥dulos necesarios
        from google_calendar_service import get_calendar_service
        from monday_api_handler import MondayAPIHandler
        from sync_logic import sincronizar_desde_google
        
        # Inicializar servicios
        google_service = get_calendar_service()
        monday_handler = MondayAPIHandler(api_token=os.getenv("MONDAY_API_KEY"))
        print("‚úÖ Servicios inicializados")
        
        # ID de prueba conocido
        test_master_event_id = "mnjvjb1igd0a2f6l84fipo5iuk"
        
        print(f"üîÑ Sincronizando desde Google: {test_master_event_id}")
        
        # Ejecutar sincronizaci√≥n completa
        start_time = time.time()
        success = sincronizar_desde_google(
            test_master_event_id,
            monday_handler=monday_handler,
            google_service=google_service
        )
        total_time = time.time() - start_time
        
        print(f"\nüìä RESULTADO:")
        print(f"   √âxito: {'‚úÖ' if success else '‚ùå'}")
        print(f"   Tiempo total: {total_time:.2f} segundos")
        
        if success and total_time < 30:  # Menos de 30 segundos es bueno
            print(f"   üéâ ¬°Sincronizaci√≥n r√°pida y exitosa!")
        elif success:
            print(f"   ‚úÖ Sincronizaci√≥n exitosa (tiempo aceptable)")
        else:
            print(f"   ‚ùå Sincronizaci√≥n fall√≥")
        
        return success
        
    except Exception as e:
        print(f"‚ùå Error en prueba de sincronizaci√≥n: {e}")
        return False

def main():
    """Ejecuta todas las pruebas de optimizaci√≥n."""
    print("üß™ PRUEBAS DE OPTIMIZACIONES MONDAY-GOOGLE")
    print("=" * 60)
    print(f"‚è∞ Inicio: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
    
    resultados = []
    
    # 1. Prueba de b√∫squeda optimizada
    try:
        resultado_busqueda = test_busqueda_optimizada()
        resultados.append(("B√∫squeda Optimizada", resultado_busqueda))
    except Exception as e:
        print(f"‚ùå Error en prueba de b√∫squeda: {e}")
        resultados.append(("B√∫squeda Optimizada", False))
    
    # 2. Prueba de detecci√≥n de automatizaci√≥n
    try:
        resultado_automatizacion = test_deteccion_automatizacion()
        resultados.append(("Detecci√≥n Automatizaci√≥n", resultado_automatizacion))
    except Exception as e:
        print(f"‚ùå Error en prueba de automatizaci√≥n: {e}")
        resultados.append(("Detecci√≥n Automatizaci√≥n", False))
    
    # 3. Prueba de sincronizaci√≥n completa
    try:
        resultado_sinc = test_sincronizacion_completa()
        resultados.append(("Sincronizaci√≥n Completa", resultado_sinc))
    except Exception as e:
        print(f"‚ùå Error en prueba de sincronizaci√≥n: {e}")
        resultados.append(("Sincronizaci√≥n Completa", False))
    
    # Resumen final
    print("\n" + "=" * 60)
    print("üìä RESUMEN DE RESULTADOS")
    print("=" * 60)
    
    exitos = 0
    for nombre, resultado in resultados:
        estado = "‚úÖ √âXITO" if resultado else "‚ùå FALLO"
        print(f"{nombre}: {estado}")
        if resultado:
            exitos += 1
    
    print(f"\nüéØ Total: {exitos}/{len(resultados)} pruebas exitosas")
    
    if exitos == len(resultados):
        print("üéâ ¬°Todas las optimizaciones funcionan perfectamente!")
    elif exitos > 0:
        print("‚ö†Ô∏è Algunas optimizaciones funcionan, revisar las que fallaron")
    else:
        print("‚ùå Ninguna optimizaci√≥n funcion√≥, revisar implementaci√≥n")
    
    print(f"‚è∞ Fin: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")

if __name__ == "__main__":
    main()
