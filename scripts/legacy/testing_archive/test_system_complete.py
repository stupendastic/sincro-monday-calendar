#!/usr/bin/env python3
"""
Script de prueba completo para verificar que el sistema funciona correctamente.
"""

import sys
import os
from dotenv import load_dotenv

# Cargar variables de entorno
load_dotenv()

sys.path.append(os.path.dirname(os.path.dirname(os.path.dirname(os.path.abspath(__file__)))))

from monday_api_handler import MondayAPIHandler
from google_calendar_service import get_calendar_service
from sync_logic import generate_content_hash, _detectar_cambio_de_automatizacion
import config

def test_monday_service():
    """Prueba el servicio de Monday.com."""
    print("üß™ Probando servicio de Monday.com...")
    
    try:
        monday_api_key = os.getenv('MONDAY_API_KEY')
        if not monday_api_key:
            print("‚ùå MONDAY_API_KEY no configurado")
            return False
        
        handler = MondayAPIHandler(api_token=monday_api_key)
        
        # Probar obtenci√≥n de item espec√≠fico
        test_item_id = "9882299305"
        item_data = handler.get_item_by_id(
            board_id=str(config.BOARD_ID_GRABACIONES),
            item_id=test_item_id,
            column_ids=[config.COL_GOOGLE_EVENT_ID, config.COL_FECHA, "personas1", "name"]
        )
        
        if item_data:
            print("‚úÖ Servicio de Monday.com funcionando correctamente")
            print(f"   Item obtenido: {item_data.get('name', 'N/A')}")
            return True
        else:
            print("‚ùå No se pudo obtener item de Monday.com")
            return False
            
    except Exception as e:
        print(f"‚ùå Error en servicio de Monday.com: {e}")
        return False

def test_google_service():
    """Prueba el servicio de Google Calendar."""
    print("\nüß™ Probando servicio de Google Calendar...")
    
    try:
        service = get_calendar_service()
        
        if service:
            print("‚úÖ Servicio de Google Calendar funcionando correctamente")
            
            # Probar acceso al calendario maestro
            try:
                calendar = service.calendars().get(calendarId=config.MASTER_CALENDAR_ID).execute()
                print(f"   Calendario maestro accesible: {calendar.get('summary', 'N/A')}")
                return True
            except Exception as e:
                print(f"‚ö†Ô∏è  No se pudo acceder al calendario maestro: {e}")
                return False
        else:
            print("‚ùå Servicio de Google Calendar no disponible")
            return False
            
    except Exception as e:
        print(f"‚ùå Error en servicio de Google Calendar: {e}")
        return False

def test_sync_logic():
    """Prueba las funciones de l√≥gica de sincronizaci√≥n."""
    print("\nüß™ Probando l√≥gica de sincronizaci√≥n...")
    
    try:
        # Probar generaci√≥n de hash
        test_content = {
            'fecha': '2025-08-25',
            'titulo': 'Prueba',
            'operarios': 'Arnau'
        }
        
        hash_result = generate_content_hash(test_content)
        if hash_result:
            print("‚úÖ Generaci√≥n de hash funcionando")
            print(f"   Hash generado: {hash_result[:20]}...")
        else:
            print("‚ùå Error generando hash")
            return False
        
        # Probar detecci√≥n de automatizaci√≥n (sin conexi√≥n real)
        print("‚úÖ Funciones de l√≥gica de sincronizaci√≥n disponibles")
        return True
        
    except Exception as e:
        print(f"‚ùå Error en l√≥gica de sincronizaci√≥n: {e}")
        return False

def test_webhook_endpoints():
    """Prueba los endpoints de webhook."""
    print("\nüß™ Probando endpoints de webhook...")
    
    import requests
    
    try:
        # Probar endpoint de salud
        response = requests.get('http://localhost:6754/health', timeout=5)
        if response.status_code == 200:
            print("‚úÖ Endpoint de salud funcionando")
        else:
            print(f"‚ùå Endpoint de salud fall√≥: {response.status_code}")
            return False
        
        # Probar endpoint de debugging
        response = requests.get('http://localhost:6754/debug/last-syncs', timeout=5)
        if response.status_code == 200:
            print("‚úÖ Endpoint de debugging funcionando")
        else:
            print(f"‚ö†Ô∏è  Endpoint de debugging fall√≥: {response.status_code}")
        
        return True
        
    except requests.exceptions.RequestException as e:
        print(f"‚ùå Error conectando a endpoints: {e}")
        return False

def main():
    """Funci√≥n principal."""
    print("üöÄ Iniciando pruebas completas del sistema...\n")
    
    # Verificar configuraci√≥n
    if not hasattr(config, 'BOARD_ID_GRABACIONES'):
        print("‚ùå BOARD_ID_GRABACIONES no configurado")
        return
    
    if not hasattr(config, 'MASTER_CALENDAR_ID'):
        print("‚ùå MASTER_CALENDAR_ID no configurado")
        return
    
    print(f"‚úÖ Configuraci√≥n verificada:")
    print(f"   - Board ID: {config.BOARD_ID_GRABACIONES}")
    print(f"   - Calendar ID: {config.MASTER_CALENDAR_ID}")
    print(f"   - API Key: {'*' * 10 + os.getenv('MONDAY_API_KEY', '')[-4:] if os.getenv('MONDAY_API_KEY') else 'No configurado'}\n")
    
    # Ejecutar pruebas
    tests = [
        ("Monday.com Service", test_monday_service),
        ("Google Calendar Service", test_google_service),
        ("Sync Logic", test_sync_logic),
        ("Webhook Endpoints", test_webhook_endpoints)
    ]
    
    results = []
    for test_name, test_func in tests:
        try:
            result = test_func()
            results.append((test_name, result))
        except Exception as e:
            print(f"‚ùå Error en {test_name}: {e}")
            results.append((test_name, False))
    
    # Resumen
    print("\n" + "="*50)
    print("üìä RESUMEN DE PRUEBAS")
    print("="*50)
    
    passed = 0
    total = len(results)
    
    for test_name, result in results:
        status = "‚úÖ PAS√ì" if result else "‚ùå FALL√ì"
        print(f"   {test_name}: {status}")
        if result:
            passed += 1
    
    print(f"\nüéØ Resultado: {passed}/{total} pruebas pasaron")
    
    if passed == total:
        print("üéâ ¬°SISTEMA COMPLETAMENTE FUNCIONAL!")
        print("\n‚úÖ Puedes probar cambiando una fecha en Monday.com")
    else:
        print("‚ö†Ô∏è  Algunas pruebas fallaron. Revisa los errores arriba.")
    
    print("\n" + "="*50)

if __name__ == "__main__":
    main()
